{"version":3,"sources":["sidebarchats.js","sidebar.js","axios.js","chat.js","App.js","serviceWorker.js","index.js"],"names":["sidebarchats","url","className","Avatar","src","sidebar","IconButton","placeholder","type","instance","axios","create","baseURL","Chat","arr","messages","useState","input","setInput","sendMessage","e","a","preventDefault","post","message","name","timestamp","received","map","bodymessage","chat__body","value","onChange","target","onClick","App","setMessages","useEffect","get","then","response","data","channel","Pusher","cluster","subscribe","bind","newMessage","unbind_all","unsubscribe","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.47cd910a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './sidebarchats.css'\r\nimport { Avatar } from '@material-ui/core'\r\n\r\nfunction sidebarchats({url}) {\r\n    return (\r\n        <div className=\"sidebarchat\">\r\n            <Avatar src={url} />\r\n            <div className=\"sidebarchat__info\">\r\n                <h2>Room name</h2>\r\n\r\n                    <p>description</p>            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default sidebarchats\r\n","import React from \"react\";\r\nimport \"./sidebar.css\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport Sidebarchats from \"./sidebarchats\"\r\nfunction sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <div>\r\n          <Avatar src=\"https://i.pinimg.com/564x/23/1e/e4/231ee4619bb95cace2ccebc85700bae4.jpg\" />\r\n        </div>\r\n\r\n        <div className=\"sidebar__header-right\">\r\n          <IconButton>\r\n            <DonutLargeIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <ChatIcon />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MoreVertIcon />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <SearchOutlined />\r\n          <input placeholder=\"    search\" type=\"text\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <Sidebarchats url = \"https://source.unsplash.com/random\"/>\r\n        <Sidebarchats  url = \"https://picsum.photos/id/237/200/300\"/>\r\n        <Sidebarchats  url = \"https://picsum.photos/id/236/200/300\"/>\r\n        <Sidebarchats url=\"https://picsum.photos/id/239/200/300\" />\r\n         \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default sidebar;\r\n","\r\nimport axios from \"axios\"\r\n \r\n        \r\nconst instance = axios.create({\r\n    baseURL: 'https://whatsappbackend.herokuapp.com/',\r\n})       \r\n \r\n\r\nexport default instance;\r\n","import React, {Component,useState} from \"react\";\r\nimport DonutLargeIcon from \"@material-ui/icons/DonutLarge\";\r\nimport { Avatar, IconButton } from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SearchOutlined from \"@material-ui/icons/SearchOutlined\";\r\nimport AttachFile from \"@material-ui/icons/AttachFile\";\r\nimport \"./chat.css\";\r\nimport InsertEmoticon from \"@material-ui/icons/InsertEmoticon\";\r\nimport MicIcon from \"@material-ui/icons/Mic\";\r\nimport axios from \"./axios\";\r\nimport SendIcon from '@material-ui/icons/Send';\r\nfunction Chat({ messages }) {\r\n  let arr = messages;\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n    axios.post(\"/messages/new\", {\r\n      message: input,\r\n      name: \"YOUR FRIEND\",\r\n      timestamp: \"just now\",\r\n      received: false,\r\n    });\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      {/* chat header */}\r\n      {chat__header()}\r\n      {/* chat body */}\r\n\r\n      {chat__body(arr)}\r\n\r\n      {/* // /* chat footer */}\r\n\r\n      <div className=\"chat__footer\">\r\n        <InsertEmoticon />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder=\"Type a message\"\r\n            type=\"text\"\r\n            \r\n          />\r\n          <button onClick={sendMessage} type=\"submit\">\r\n            <SendIcon />\r\n          </button>\r\n        </form>\r\n        <MicIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction chat__header() {\r\n  return (\r\n    <div className=\"chat__header\">\r\n      <Avatar />\r\n      <div className=\"chat__headerinfo\">\r\n        <h3>Room name</h3>\r\n        <p>last seen ...</p>\r\n      </div>\r\n\r\n      <div className=\"chat__headerright\">\r\n        {\" \"}\r\n        <IconButton>\r\n          <SearchOutlined />\r\n        </IconButton>\r\n        <IconButton>\r\n          <AttachFile />\r\n        </IconButton>\r\n        <IconButton>\r\n          <MoreVertIcon />\r\n        </IconButton>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction chat__body(messages) {\r\n  return (\r\n    <div className=\"chat__body\">\r\n      {messages.map((message) => bodymessage(message))}\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction bodymessage(message) {\r\n  return (\r\n    <div>\r\n      {\" \"}\r\n      {\r\n        <p>\r\n          <div\r\n            className={`${message.received && \"chat__receiver\"} chat__message`}\r\n          >\r\n            <span className=\"chat__name\">{message.name}</span>\r\n            {message.message}\r\n            <span className=\"chat__timestamp\">{message.timestamp}</span>\r\n          </div>\r\n        </p>\r\n      }\r\n    </div>\r\n  );\r\n}\r\nexport default Chat;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Sidebar from \"./sidebar\";\nimport Chat from \"./chat\";\nimport Pusher from \"pusher-js\";\nimport axios from \"./axios\";\n  \n\n\n\n\nfunction App() {\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    axios.get(\"/messages/sync\").then((response) => {\n     \n      setMessages(response.data);\n    });\n  }, []);\n  \n  useEffect(() => {\n    const pusher = new Pusher(\"04fce40b2e6ccaebe6ad\", {\n      cluster: \"ap2\",\n    });\n\n    const channel = pusher.subscribe(\"messages\");\n    channel.bind(\"inserted\", (newMessage) => {\n      // alert(JSON.stringify(newMessage));\n      setMessages([...messages, newMessage]);\n    });\n    return () => {\n      channel.unbind_all();\n      channel.unsubscribe();\n    };\n  }, [messages]);\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"app__body\">\n        {/* sidebar  */}\n\n        <Sidebar />\n\n        {/* chat componenet */}\n        <Chat messages={messages} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n     \n<script src=\"/__/firebase/7.20.0/firebase-app.js\"></script>\n\n \n\n\n<script src=\"/__/firebase/init.js\"></script>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}